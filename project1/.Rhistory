# for (i in 1:7){
#
#   chiTestOut <- chisq.test(dsOutRemoved, dsCat[,i])
#   print(chiTestOut$p.value)
# }
}
#chisquare test with casual
casual <- 'casual'
chiTestFunc(dsCat,casual)
chiTestFunc <- function(df,var){
print((class(var))
# for (i in 1:7){
#
#   chiTestOut <- chisq.test(dsOutRemoved, dsCat[,i])
#   print(chiTestOut$p.value)
# }
}
chiTestFunc <- function(df,var){
print(class(var))
for (i in 1:7){
chiTestOut <- chisq.test(dsOutRemoved, dsCat[,i])
print(chiTestOut$p.value)}
}
var <- "casual"
chiTestFunc(dsCat,var)
chiTestFunc <- function(df,var){
print(class(var))
for (i in 1:7){
chiTestOut <- chisq.test(dsOutRemoved$var, dsCat[,i])
print(chiTestOut$p.value)}
}
var <- "casual"
chiTestFunc(dsCat,var)
chiTestFunc <- function(df,var){
print(class(var))
for (i in 1:7){
chiTestOut <- chisq.test(dsOutRemoved$var, dsCat[,i])
print(chiTestOut$p.value)}
}
var <- "casual"
chiTestFunc(dsCat,12)
chiTestFunc <- function(df,var){
print(class(var))
for (i in 1:7){
chiTestOut <- chisq.test(dsOutRemoved[,var], dsCat[,i])
print(chiTestOut$p.value)}
}
var <- "casual"
chiTestFunc(dsCat,12)
chiTestFunc <- function(df,var){
j <- grep(var,colnames(dsOutRemoved))
for (i in 1:7){
chiTestOut <- chisq.test(dsOutRemoved[,var], dsCat[,i])
print(chiTestOut$p.value)}
}
var <- "casual"
chiTestFunc(dsCat,var)
var <- "registered"
chiTestFunc(dsCat,var)
#making function
chiTestFunc <- function(df,var){
j <- grep(var,colnames(dsOutRemoved))
for (i in 1:7){
print(colnames(dsCat[i]))
chiTestOut <- chisq.test(dsOutRemoved[,var], dsCat[,i])
print(chiTestOut$p.value)}
}
#chisquare test with casual
var <- "casual"
chiTestFunc(dsCat,var)
#chisquare test with registered
var <- "registered"
chiTestFunc(dsCat,var)
var <- "casual"
chiTestFunc(dsCat,var)
chiTestFunc(dsCat,var)
var <- "registered"
chiTestFunc(dsCat,var)
remove(casual)
remove(col)
corrMat <- cor(ds)
corrMat <- cor(dsPredictors)
corrMat <- cor(dsCont)
corrMatTemp <- cor(dsPredictors)
View(corrMatTemp)
library(tidyverse)
library(tidyverse)
model <- lm(casual ~., data = dsPredictors[,1:12])
summary(model)
library(tidyverse)
#dsContCas <- dsCont + dsOutRemoved
model <- lm(casual ~., data = dsOutRemoved[,1:12])
summary(model)
dsContCas <- dsCont + dsOutRemoved[,12]
View(dsContCas)
dsContCas <- dsCont + dsOutRemoved[,12]
dsContCas$casual <- dsOutRemoved[,12]
library(tidyverse)
dsContCas$casual <- dsOutRemoved[,12]
model <- lm(casual ~., data = dsContCas)
summary(model)
library(tidyverse)
#multiple regression model
dsContCas$casual <- dsOutRemoved[,12]
mlrmodel <- lm(casual ~., data = dsContCas)
summary(mlrmodel)
remove(model)
remove(corrMatTemp)
View(chiSquare)
remove(chiSquare)
install.packages("randomForest)
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
dsContReg$registered <- dsOutRemoved[,13]
mlrmodelReg <- lm(registered ~., data = dsContReg)
summary(mlrmodelReg)
dsContReg$registered <- dsOutRemoved[,13]
dsOutRemoved[,13]
View(dsOutRemoved)
dsContReg$registered <- dsOutRemoved[,13]
dsContReg <- dsCont
dsContReg$registered <- dsOutRemoved[,13]
mlrmodelReg <- lm(registered ~., data = dsContReg)
summary(mlrmodelReg)
View(dsContReg)
View(dsContCas)
dsContCas <- dsCont
dsContCas$casual <- dsOutRemoved[,12]
dsContCas <- dsCont
dsContCas$casual <- dsOutRemoved[,12]
mlrmodelCas <- lm(casual ~., data = dsContCas)
summary(mlrmodelCas)
#with all
dsCas <- dsOutRemoved[,1:11]
dsCas$casual <- dsOutRemoved[,12]
dsCas <- dsOutRemoved[,1:11]
dsCas$casual <- dsOutRemoved[,12]
mlrmodelCas <- lm(casual ~., data = dsCas)
summary(mlrmodelCas)
confint(mlrmodelCas)
View(dsOutRemoved)
class(dsOutRemoved$workingday)
#removing unwanted feature
dsOutRemoved <- dsOutRemoved$atemp
View(dsCat)
unwanted_outliers <- boxplot(dsPredictors$windspeed, plot = FALSE)$out
dsOutRemoved <- dsPredictors[-which(dsPredictors$windspeed %in% unwanted_outliers ),]
drawBoxP(dsOutRemoved)
#removing unwanted feature
dsOutRemoved <- -dsOutRemoved$atemp
dsOutRemoved <- dsPredictors[-which(dsPredictors$windspeed %in% unwanted_outliers ),]
#removing unwanted feature
dsOutRemoved drops <- dsOutRemoved$atemp
#removing unwanted feature
dsOutRemoved <- dsOutRemoved[,!atemp]
#removing unwanted feature
dsOutRemoved <- dsOutRemoved[,!(atemp)]
View(dsOutRemoved)
#removing unwanted feature
dsOutRemoved <- dsOutRemoved[,!(9)]
dsOutRemoved <- dsPredictors[-which(dsPredictors$windspeed %in% unwanted_outliers ),]
View(dsOutRemoved)
#removing unwanted feature
dsOutRemoved <- dsOutRemoved[,!9]
dsOutRemoved <- dsPredictors[-which(dsPredictors$windspeed %in% unwanted_outliers ),]
#removing unwanted feature
dsOutRemoved$atemp <- NULL
View(dsOutRemoved)
dsContCas <- dsOutRemoved[,1:11]
mlrmodelCas <- lm(casual ~., data = dsContCas)
summary(mlrmodelCas)
#for registered
dsContReg <- dsOutRemoved[,1:10]
dsContReg$registered <- dsOutRemoved[,13]
mlrmodelReg <- lm(registered ~., data = dsContReg)
summary(mlrmodelReg)
#with all
remove(dsCat)
remove(dsCas)
remove(dsCont)
remove(mlrmodel)
dsCatCas <- dsOutRemoved[,1:11]
#removing season due to feature selection chi-test
dsCatCas$season <- NULL
View(dsCatCas)
View(dsOutRemoved)
ds <- read.csv("C:/Users/riddh/OneDrive/Documents/Edwisor/Project 1/day.csv", sep = ",")
#removing unwanted variables
dsPredictors <- ds[,3:16]
#renaming colnames
dsPredictors <- dplyr::rename(dsPredictors, 'year' = yr,
'month' = mnth, 'weatherSituation' = weathersit,
'count' = cnt, 'humidity' = hum)
dsOutRemoved <- dsPredictors[-which(dsPredictors$windspeed %in% unwanted_outliers ),]
dsCont <- dsOutRemoved[,8:11]
dsCat <- dsOutRemoved[,1:7]
dsOutRemoved$atemp <- NULL
dsCatCas <- dsOutRemoved[,1:11]
#removing season due to feature selection chi-test
dsCatCas$season <- NULL
dsCatCas <- transform(dsCatCas, season = as.factor(season),
season = as.factor(season),
season = as.factor(season),season = as.factor(season))
dsContCas <- dsOutRemoved[,1:11]
#removing season due to feature selection chi-test
dsContCas$season <- NULL
mlrmodelCas <- lm(casual ~., data = dsContCas)
summary(mlrmodelCas)
#for registered
dsContReg <- dsOutRemoved[,1:10]
dsContReg$registered <- dsOutRemoved[,13]
mlrmodelReg <- lm(registered ~., data = dsContReg)
summary(mlrmodelReg)
year = as.factor(season)
dsCatCas <- transform(dsCatCas,
year = as.factor(holiday))
dsCatCas <- dsOutRemoved[,1:11]
#removing season due to feature selection chi-test
dsCatCas$season <- NULL
dsCatCas <- transform(dsCatCas,
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
install.packages("e1071")
rfmodel <- randomForest(casual ~ ., data = dsCatCas)
View(rfmodel)
print(rfmodel)
remove(rfmodel)
rfmodelCas <- randomForest(casual ~ ., data = dsCatCas)
print(rfmodelCas)
#for registered
dsCatReg <- dsOutRemoved[,1:10]
dsCatReg$registered <- dsOutRemoved[,13]
#keeping categorical variables as categorical
dsCatReg <- transform(dsCatReg,
season = as.factor(season),
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
rfmodelReg <- randomForest(registered ~ ., data = dsCatReg)
print(rfmodelReg)
library(tidyverse)
library(randomForest)
#multiple regression model for continuous variables
#for casual
dsContCas <- dsOutRemoved[,1:11]
#removing season due to feature selection chi-test
dsContCas$season <- NULL
mlrmodelCas <- lm(casual ~., data = dsContCas)
summary(mlrmodelCas)
#for registered
dsContReg <- dsOutRemoved[,1:10]
dsContReg$registered <- dsOutRemoved[,13]
mlrmodelReg <- lm(registered ~., data = dsContReg)
summary(mlrmodelReg)
#random forest for categorical variables
#for casual
dsCatCas <- dsOutRemoved[,1:11]
#removing season due to feature selection chi-test
dsCatCas$season <- NULL
#keeping categorical variables as categorical
dsCatCas <- transform(dsCatCas,
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
rfmodelCas <- randomForest(casual ~ ., data = dsCatCas)
print(rfmodelCas)
#for registered
dsCatReg <- dsOutRemoved[,1:10]
dsCatReg$registered <- dsOutRemoved[,13]
#keeping categorical variables as categorical
dsCatReg <- transform(dsCatReg,
season = as.factor(season),
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
rfmodelReg <- randomForest(registered ~ ., data = dsCatReg)
print(rfmodelReg)
trainIndex = createDataPartition(dsOutRemoved$count, p = .80, list = FALSE)
print(trainIndex)
library(tidyverse)
library(randomForest)
library(caret)
trainIndex = createDataPartition(dsOutRemoved$count, p = .80, list = FALSE)
print(trainIndex)
dsContCas <- dsOutRemoved[trainIndex,1:11]
library(tidyverse)
library(randomForest)
library(caret)
#index for partition: test and train
trainIndex = createDataPartition(dsOutRemoved$count, p = .80, list = FALSE)
#multiple regression model for continuous variables
#for casual
dsContCas <- dsOutRemoved[trainIndex,1:11]
#removing season due to feature selection chi-test
dsContCas$season <- NULL
mlrmodelCas <- lm(casual ~., data = dsContCas)
summary(mlrmodelCas)
#for registered
dsContReg <- dsOutRemoved[trainIndex,1:10]
dsContReg$registered <- dsOutRemoved[trainIndex,13]
mlrmodelReg <- lm(registered ~., data = dsContReg)
summary(mlrmodelReg)
#random forest for categorical variables
#for casual
dsCatCas <- dsOutRemoved[trainIndex,1:11]
#removing season due to feature selection chi-test
dsCatCas$season <- NULL
#keeping categorical variables as categorical
dsCatCas <- transform(dsCatCas,
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
rfmodelCas <- randomForest(casual ~ ., data = dsCatCas)
print(rfmodelCas)
#for registered
dsCatReg <- dsOutRemoved[trainIndex,1:10]
dsCatReg$registered <- dsOutRemoved[trainIndex,13]
#keeping categorical variables as categorical
dsCatReg <- transform(dsCatReg,
season = as.factor(season),
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
rfmodelReg <- randomForest(registered ~ ., data = dsCatReg)
print(rfmodelReg)
dsContCasTest <- dsOutRemoved[-trainIndex,1:11]
dsContCasTest$season <- NULL
dsContRegTest <- dsOutRemoved[-trainIndex,1:10]
dsContRegTest$registered <- dsOutRemoved[-trainIndex,13]
dsCatCasTest <- dsOutRemoved[-trainIndex,1:11]
dsCatCasTest$season <- NULL
dsCatCasTest <- transform(dsCatCasTest,
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
dsCatRegTest <- dsOutRemoved[-trainIndex,1:10]
dsCatReg$registered <- dsOutRemoved[-trainIndex,13]
dsCatRegTest$registered <- dsOutRemoved[-trainIndex,13]
dsCatRegTest <- transform(dsCatRegTest,
season = as.factor(season),
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
#predictions
predictions <- mlrmodelCas %>% predict(dsContCasTest)
print(predictions)
RMSE(predictions, dsContCasTest$casual)
RMSE(predictions, dsContCasTest$casual)/mean(dsContCasTest$casual)
MAPE(dsContCasTest$casual,predictions)
library(statMeasures)
install.packages("statMeasures")
install.packages('StatMeasures')
MAPE(dsContCasTest$casual,predictions)
library(statMeasures)
library(StatMeasures)
MAPE(dsContCasTest$casual,predictions)
install.packages("MLmetrics")
library(MLmetrics)
MAPE(dsContCasTest$casual,predictions)
library(StatMeasures)
mape(dsContCasTest$casual,predictions)
library(MLmetrics)
library(StatMeasures)
#predictions
casPredictionsMLR <- mlrmodelCas %>% predict(dsContCasTest)
accuracy <- 100 - RMSE(casPredictionsMLR, dsContCasTest$casual)/mean(dsContCasTest$casual)
#predictions
casPredictionsMLR <- mlrmodelCas %>% predict(dsContCasTest)
accuracy <- RMSE(casPredictionsMLR, dsContCasTest$casual)/mean(dsContCasTest$casual)
casPredictionsMLR <- mlrmodelCas %>% predict(dsContCasTest)
print(casPredictionsMLR)
RMSE(casPredictionsMLR, dsContCasTest$casual)/mean(dsContCasTest$casual)
remove(predictions)
remove(accuracy)
#predictions for MLR
#for casual
casPredictionsMLR <- mlrmodelCas %>% predict(dsContCasTest)
casAccuracyMLR <- 100 - RMSE(casPredictionsMLR, dsContCasTest$casual)/mean(dsContCasTest$casual)
#for registered
regPredictionsMLR <- mlrmodelCas %>% predict(dsContRegTest)
regAccuracyMLR <- 100 - RMSE(casPredictionsMLR, dsContCasTest$casual)/mean(dsContCasTest$casual)
#predictions for MLR
#for casual
casPredictionsMLR <- mlrmodelCas %>% predict(dsContCasTest)
casAccuracyMLR <- 100 - RMSE(casPredictionsMLR, dsContCasTest$casual)*100/mean(dsContCasTest$casual)
#for registered
regPredictionsMLR <- mlrmodelReg %>% predict(dsContRegTest)
regAccuracyMLR <- 100 - RMSE(regPredictionsMLR, dsContRegTest$registered)*100/mean(dsContRegTest$registered)
casPredictionsRF <- rfmodelCas %>% predict(dsCatCasTest)
casAccuracyRF <- 100 - RMSE(casPredictionsRF, dsCatCasTest$casual)*100/mean(dsCatCasTest$casual)
regPredictionsRF <- rfmodelReg %>% predict(dsCatRegTest)
regAccuracyRF <- 100 - RMSE(regPredictionsRF, dsCatRegTest$registered)*100/mean(dsCatRegTest$registered)
library(tidyverse)
library(randomForest)
library(caret)
#index for partition: test and train
trainIndex = createDataPartition(dsOutRemoved$count, p = .80, list = FALSE)
#multiple regression model for continuous variables
#for casual
dsContCas <- dsOutRemoved[trainIndex,1:11]
dsContCasTest <- dsOutRemoved[-trainIndex,1:11]
#removing season due to feature selection chi-test
dsContCas$season <- NULL
dsContCasTest$season <- NULL
mlrmodelCas <- lm(casual ~., data = dsContCas)
summary(mlrmodelCas)
dsContReg <- dsOutRemoved[trainIndex,1:10]
dsContRegTest <- dsOutRemoved[-trainIndex,1:10]
dsContReg$registered <- dsOutRemoved[trainIndex,13]
dsContRegTest$registered <- dsOutRemoved[-trainIndex,13]
mlrmodelReg <- lm(registered ~., data = dsContReg)
summary(mlrmodelReg)
dsCatCas <- dsOutRemoved[trainIndex,1:11]
dsCatCasTest <- dsOutRemoved[-trainIndex,1:11]
#removing season due to feature selection chi-test
dsCatCas$season <- NULL
dsCatCasTest$season <- NULL
#keeping categorical variables as categorical
dsCatCas <- transform(dsCatCas,
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
dsCatCasTest <- transform(dsCatCasTest,
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
rfmodelCas <- randomForest(casual ~ ., data = dsCatCas)
print(rfmodelCas)
dsCatReg <- dsOutRemoved[trainIndex,1:10]
dsCatRegTest <- dsOutRemoved[-trainIndex,1:10]
dsCatReg$registered <- dsOutRemoved[trainIndex,13]
dsCatRegTest$registered <- dsOutRemoved[-trainIndex,13]
#keeping categorical variables as categorical
dsCatReg <- transform(dsCatReg,
season = as.factor(season),
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
dsCatRegTest <- transform(dsCatRegTest,
season = as.factor(season),
year = as.factor(year),
month = as.factor(month),
holiday = as.factor(holiday),
weekday = as.factor(weekday),
workingday = as.factor(workingday),
weatherSituation = as.factor(weatherSituation))
rfmodelReg <- randomForest(registered ~ ., data = dsCatReg)
print(rfmodelReg)
#predictions and accuracy for MLR
#for casual
casPredictionsMLR <- mlrmodelCas %>% predict(dsContCasTest)
casAccuracyMLR <- 100 - RMSE(casPredictionsMLR, dsContCasTest$casual)*100/mean(dsContCasTest$casual)
#for registered
regPredictionsMLR <- mlrmodelReg %>% predict(dsContRegTest)
regAccuracyMLR <- 100 - RMSE(regPredictionsMLR, dsContRegTest$registered)*100/mean(dsContRegTest$registered)
print(paste("Accuracy for casual ",str(casAccuracyMLR)))
str(casAccuracyMLR)
print(paste("Accuracy for casual ",casAccuracyMLR))
#predictions and accuracy for MLR
#for casual
casPredictionsMLR <- mlrmodelCas %>% predict(dsContCasTest)
casAccuracyMLR <- 100 - RMSE(casPredictionsMLR, dsContCasTest$casual)*100/mean(dsContCasTest$casual)
print(paste("Accuracy for casual ",casAccuracyMLR))
#for registered
regPredictionsMLR <- mlrmodelReg %>% predict(dsContRegTest)
regAccuracyMLR <- 100 - RMSE(regPredictionsMLR, dsContRegTest$registered)*100/mean(dsContRegTest$registered)
print(paste("Accuracy for registered ",regAccuracyMLR))
#predictions and accuracy for RF
#for casual
casPredictionsRF <- rfmodelCas %>% predict(dsCatCasTest)
casAccuracyRF <- 100 - RMSE(casPredictionsRF, dsCatCasTest$casual)*100/mean(dsCatCasTest$casual)
print(paste("Accuracy for casual ",casAccuracyRF))
#for registered
regPredictionsRF <- rfmodelReg %>% predict(dsCatRegTest)
regAccuracyRF <- 100 - RMSE(regPredictionsRF, dsCatRegTest$registered)*100/mean(dsCatRegTest$registered)
print(paste("Accuracy for registered ",regAccuracyRF))
